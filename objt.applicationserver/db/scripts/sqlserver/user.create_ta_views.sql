-- SQL Server TA views --

-- MAXDATE FUNCTION (GREATEST FUNCTION DOES NOT EXIST FOR SQL SERVER)
-- for n columns this function is used in cascade

IF EXISTS(SELECT 1 FROM sys.objects WHERE OBJECT_ID = OBJECT_ID(N'dbo.MaxDate') AND type = (N'FN'))
DROP FUNCTION dbo.MaxDate
GO

CREATE FUNCTION dbo.MaxDate(@value1 DATETIME2 = '', @value2 DATETIME2 = '') -- DATETIME2 = '' > use '1900-01-01 00:00:00.000' as default value
RETURNS DATETIME2 AS
BEGIN
  DECLARE @Result DATETIME2
  SET @value1 = ISNULL(@value1,'')
  SET @value2 = ISNULL(@value2,'')
  IF (@value1 >= @value2) SET @Result = @value1
  ELSE SET @Result = @value2
  RETURN @Result
END
GO

-- COSTCENTERS --

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('DCEREPORT_COSTCENTERS') AND OBJECTPROPERTY(id, 'IsView') = 1)
DROP VIEW DCEREPORT_COSTCENTERS
GO

CREATE VIEW DCEREPORT_COSTCENTERS
AS
SELECT costcenter.OID OID,
       costcenter.NAME NAME,
       costcenter.DESCRIPTION DESCRIPTION,
       costcenter.ID ID,
       costcenter.DTSVALIDFROM DTSVALIDFROM,
       costcenter.DTSVALIDUNTIL DTSVALIDUNTIL,
       costcenter.DTSUPDATE DTSUPDATE
FROM OBJT_COSTCENTER costcenter WITH (NOLOCK)
GO

-- PLANNED ATTENDANCES --

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('DCEREPORT_PLANNED_ATTENDANCES') AND OBJECTPROPERTY(id, 'IsView') = 1)
DROP VIEW DCEREPORT_PLANNED_ATTENDANCES
GO

CREATE VIEW DCEREPORT_PLANNED_ATTENDANCES
AS
SELECT attendanceoperation.OID OID,
       employee.OID EMPLOYEE_OID,
       attendanceoperation.NAME NAME,
       attendanceoperation.DESCRIPTION DESCRIPTION,
	     attendanceoperation.CATEGORY CATEGORY,
       attendanceoperation.DTSPLANNEDSTART DTSSTART,
       attendanceoperation.DTSPLANNEDSTOP DTSSTOP,
       attendanceoperation.ATTENDANCECODEOID DAY_CODE_OID,
       attendanceoperation.DTSVALIDFROM DTSVALIDFROM,
       attendanceoperation.DTSVALIDUNTIL DTSVALIDUNTIL,
       attendanceoperation.DTSUPDATE DTSUPDATE
FROM OBJT_ATTENDANCEOPERATION attendanceoperation WITH (NOLOCK),
     OBJT_EMPLOYEE employee WITH (NOLOCK)
WHERE attendanceoperation.BOTYPE = 0
AND attendanceoperation.EMPLOYEEOID = employee.OID
GO

-- DAY CODES --

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('DCEREPORT_DAY_CODES') AND OBJECTPROPERTY(id, 'IsView') = 1)
DROP VIEW DCEREPORT_DAY_CODES
GO

CREATE VIEW DCEREPORT_DAY_CODES
AS
SELECT attendancecode.OID OID,
       attendancecode.NAME NAME,
       attendancecode.DESCRIPTION DESCRIPTION,
       attendancecode.ID ID,
       CASE WHEN (attendancecode.CODEUNIT = 0) THEN 'H:M'
            WHEN (attendancecode.CODEUNIT = 1) THEN 'd'
            WHEN (attendancecode.CODEUNIT = 2) THEN '#' END AS UNIT,
       CASE WHEN (attendancecode.BOTYPE = 0) THEN 'ATTENDANCE'
            WHEN (attendancecode.BOTYPE = 1) THEN 'ABSENCE'
            WHEN (attendancecode.BOTYPE = 2) THEN 'SPECIAL' END AS TYPE,
       attendancecodelink.PARENTOID BALANCE_CODE_OID,
       attendancecodelink.TRANSFERFACTOR TRANSFER_FACTOR,
       CAST(CASE WHEN (attendancecodelink.TRANSFERTYPE = 0) THEN 'INCREMENT'
            WHEN (attendancecodelink.TRANSFERTYPE = 1) THEN 'DECREMENT' END AS VARCHAR(9)) AS TRANSFER_TYPE,
       attendancecode.DTSVALIDFROM DTSVALIDFROM,
       attendancecode.DTSVALIDUNTIL DTSVALIDUNTIL,
       attendancecode.DTSUPDATE DTSUPDATE
FROM OBJT_ATTENDANCECODE attendancecode WITH (NOLOCK)
  LEFT OUTER JOIN OBJT_ATTENDANCECODELINK attendancecodelink WITH (NOLOCK) ON attendancecode.OID = attendancecodelink.CHILDOID AND attendancecodelink.BOTYPE = 1 -- transfer type --
WHERE attendancecode.BOTYPE != 3 -- no Counter code --
GO

-- BALANCE CODES --

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('DCEREPORT_BALANCE_CODES') AND OBJECTPROPERTY(id, 'IsView') = 1)
DROP VIEW DCEREPORT_BALANCE_CODES
GO

CREATE VIEW DCEREPORT_BALANCE_CODES
AS
SELECT balancecode.OID OID,
       balancecode.NAME NAME,
       balancecode.DESCRIPTION DESCRIPTION,
       balancecode.ID ID,
       CASE WHEN (balancecode.CODEUNIT = 0) THEN 'H:M'
            WHEN (balancecode.CODEUNIT = 1) THEN 'd'
            WHEN (balancecode.CODEUNIT = 2) THEN '#' END AS UNIT,
       balancecode.DTSVALIDFROM DTSVALIDFROM,
       balancecode.DTSVALIDUNTIL DTSVALIDUNTIL,
       balancecode.DTSUPDATE DTSUPDATE
FROM OBJT_ATTENDANCECODE balancecode WITH (NOLOCK)
WHERE balancecode.BOTYPE = 3 -- Counter code --
GO

-- ACCESS OPERATIONS --

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('DCEREPORT_ACCESS_OPERATIONS') AND OBJECTPROPERTY(id, 'IsView') = 1)
DROP VIEW DCEREPORT_ACCESS_OPERATIONS
GO

CREATE VIEW DCEREPORT_ACCESS_OPERATIONS
AS
SELECT accessoperation.OID OID,
       accessoperation.EMPLOYEEOID EMPLOYEE_OID,
       accessoperation.ACCESSBADGEOID ACCESSBADGE_OID,
       accessoperation.DTSSTART DTSSTART,
       accessoperation.DTSSTOP DTSSTOP,
       accessoperation.DTSVALIDFROM DTSVALIDFROM,
       accessoperation.DTSVALIDUNTIL DTSVALIDUNTIL,
       accessoperation.STATUS STATUS,
       accessoperation.DEVICEOID ACCESSREADERDEVICE_OID,
       accessoperation.ACCESSGATEOID ACCESSGATE_OID,
       accessoperation.ACCESSAREAOID ACCESSAREA_OID,
       accessoperation.DTSUPDATE DTSUPDATE
FROM OBJT_ACCESSOPERATION accessoperation WITH (NOLOCK)
GO

-- ACCESS BADGE --

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('DCEREPORT_ACCESS_BADGES') AND OBJECTPROPERTY(id, 'IsView') = 1)
DROP VIEW DCEREPORT_ACCESS_BADGES
GO

CREATE VIEW DCEREPORT_ACCESS_BADGES
AS
SELECT accessbadge.OID OID,
       accessbadge.NAME ID,
       accessbadge.DESCRIPTION DESCRIPTION,
       CASE WHEN (accessbadge.STATUS = 0) THEN 'VALID'
            WHEN (accessbadge.STATUS = 1) THEN 'INVALID'
            WHEN (accessbadge.STATUS = 2) THEN 'LOST' END AS STATUS,
       accessbadge.DTSSTART DTSSTART,
       accessbadge.DTSSTOP DTSSTOP,
       accessbadge.DTSVALIDFROM DTSVALIDFROM,
       accessbadge.DTSVALIDUNTIL DTSVALIDUNITL,
       accessbadge.DTSUPDATE DTSUPDATE
FROM OBJT_ACCESSBADGE accessbadge WITH (NOLOCK)
GO

-- ACCESS READER DEVICES --

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('DCEREPORT_ACCESS_READERDEVICES') AND OBJECTPROPERTY(id, 'IsView') = 1)
DROP VIEW DCEREPORT_ACCESS_READERDEVICES
GO

CREATE VIEW DCEREPORT_ACCESS_READERDEVICES
AS
SELECT accessreaderdevice.OID OID,
       accessreaderdevice.NAME NAME,
       accessreaderdevice.DESCRIPTION DESCRIPTION,
       CASE WHEN (accessreaderdevice.BOTYPE = 0) THEN 'IN'
            WHEN (accessreaderdevice.BOTYPE = 1) THEN 'OUT' END AS ACCESSTYPE,
       accessreaderdevice.DEVICEADDRESS DEVICEADDRESS,
       accessreaderdevice.DTSUPDATE DTSUPDATE
FROM OBJT_ACCESSREADERDEVICE accessreaderdevice WITH (NOLOCK)
WHERE accessreaderdevice.BOTYPE IN(0,1) -- Access readers --
GO

-- ACCESS GATES --

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('DCEREPORT_ACCESS_GATES') AND OBJECTPROPERTY(id, 'IsView') = 1)
DROP VIEW DCEREPORT_ACCESS_GATES
GO

CREATE VIEW DCEREPORT_ACCESS_GATES
AS
SELECT accessgate.OID OID,
       accessgate.NAME NAME,
       accessgate.DESCRIPTION DESCRIPTION,
       accessgate.DTSUPDATE DTSUPDATE
FROM OBJT_ACCESSGATE accessgate WITH (NOLOCK)
GO

-- ACCESS AREAS --

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('DCEREPORT_ACCESS_AREAS') AND OBJECTPROPERTY(id, 'IsView') = 1)
DROP VIEW DCEREPORT_ACCESS_AREAS
GO

CREATE VIEW DCEREPORT_ACCESS_AREAS
AS
SELECT accessarea.OID OID,
       accessarea.NAME NAME,
       accessarea.DESCRIPTION DESCRIPTION,
       accessarea.EVACUATIONZONE EVACUATIONZONE,
       accessarea.DTSUPDATE DTSUPDATE
FROM OBJT_ACCESSAREA accessarea WITH (NOLOCK)
GO

-- DEPARTMENTS_EMPLOYEES --

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('OBJTREP_DEPT_EMPLOYEES') AND OBJECTPROPERTY(id, 'IsView') = 1)
DROP VIEW OBJTREP_DEPT_EMPLOYEES
GO

CREATE VIEW OBJTREP_DEPT_EMPLOYEES
AS
SELECT employee_department_link.OID OID,
       department.NAME NAME,
       department.DESCRIPTION DESCRIPTION,
       employee.OID EMPLOYEE_OID,
       employee.NAME EMPLOYEE_NAME,
       employee.FIRSTNAME EMPLOYEE_FIRSTNAME,
       employee_department_link.DTSVALIDFROM EMP_DEP_LINK_DTSVALIDFROM,
       employee_department_link.DTSVALIDUNTIL EMP_DEP_LINK_DTSVALIDUNTIL,
       dbo.MaxDate(department.DTSUPDATE, employee.DTSUPDATE) AS DTSUPDATE,
       department.DTSUPDATE AS DTSUPDATE_1,
       employee.DTSUPDATE AS DTSUPDATE_2
FROM OBJT_DEPARTMENT department WITH (NOLOCK),
     OBJT_EMPLOYEE employee WITH (NOLOCK),
     OBJT_RESOURCELINK employee_department_link WITH (NOLOCK)
WHERE employee_department_link.CHILDOID = employee.OID
AND employee_department_link.PARENTOID = department.OID
GO

--  ANOMALY REASONS --

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('OBJTREP_ANOMALYREASONS') AND OBJECTPROPERTY(id, 'IsView') = 1)
DROP VIEW OBJTREP_ANOMALYREASONS
GO

CREATE VIEW OBJTREP_ANOMALYREASONS
AS
SELECT reason.OID OID,
		   reason.NAME NAME,
		   reason.DESCRIPTION DESCRIPTION,
		   reason.BOTYPE TYPE,
		   reason.DTSUPDATE DTSUPDATE
FROM OBJT_REASON reason WITH (NOLOCK)
GO

-- ATTENDANCE PERIODS --

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('OBJTREP_ATTENDANCEPERIODS') AND OBJECTPROPERTY(id, 'IsView') = 1)
DROP VIEW OBJTREP_ATTENDANCEPERIODS
GO

CREATE VIEW OBJTREP_ATTENDANCEPERIODS
AS
SELECT period.OID OID,
		   period.EMPLOYEEOID EMPLOYEE_OID,
		   period.DTSSTART DTSSTART,
		   period.DTSSTOP DTSSTOP,
		   period.DTSUPDATE DTSUPDATE
FROM OBJT_ATTENDANCEPERIOD period WITH (NOLOCK)
GO

-- PERIOD ATTENDANCE COUNTERS --

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('OBJTREP_BALANCE_COUNTERS') AND OBJECTPROPERTY(id, 'IsView') = 1)
DROP VIEW OBJTREP_BALANCE_COUNTERS
GO

CREATE VIEW OBJTREP_BALANCE_COUNTERS
AS
SELECT attcounter.OID OID,
       attcounter.EMPLOYEEOID EMPLOYEE_OID,
       attcounter.ATTENDANCECODEOID BALANCE_CODE_OID,
       attcounter.ATTENDANCEPERIODOID PERIOD_OID,
       attcounter.QTYTARGET START_VALUE,
       attcounter.VALUE END_VALUE,
       attcounter.QTYPLANNED PLANNED_VALUE,
       attcounter.DTSUPDATE DTSUPDATE
FROM OBJT_PERIODATTENDANCECOUNTER attcounter WITH (NOLOCK)
GO

-- DAY ATTENDANCE COUNTERS --

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('OBJTREP_DAY_COUNTERS') AND OBJECTPROPERTY(id, 'IsView') = 1)
DROP VIEW OBJTREP_DAY_COUNTERS
GO

CREATE VIEW OBJTREP_DAY_COUNTERS
AS
SELECT dayattendancecounter.OID OID,
	     dayattendancecounter.EMPLOYEEOID EMPLOYEE_OID,
	     dayattendancecounter.ATTENDANCECODEOID DAY_CODE_OID,
       attendanceday.DTS DTS,
       dayattendancecounter.VALUE DURATION,
       dayattendancecounter.DTSUPDATE DTSUPDATE
FROM OBJT_DAYATTENDANCECOUNTER dayattendancecounter WITH (NOLOCK),
     OBJT_ATTENDANCEDAY attendanceday WITH (NOLOCK)
WHERE dayattendancecounter.ATTENDANCEDAYOID = attendanceday.OID
AND attendanceday.EMPLOYEEOID = dayattendancecounter.EMPLOYEEOID
GO

-- DAY ATTENDANCE COUNTER COST DETAILS --

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('OBJTREP_DAYATTCNTRCOSTDTLS') AND OBJECTPROPERTY(id, 'IsView') = 1)
DROP VIEW OBJTREP_DAYATTCNTRCOSTDTLS
GO

CREATE VIEW OBJTREP_DAYATTCNTRCOSTDTLS
AS
SELECT counterdetail.OID OID,
       dayattendancecounter.EMPLOYEEOID EMPLOYEE_OID,
	     dayattendancecounter.ATTENDANCECODEOID DAY_CODE_OID,
	     counterdetail.COSTCENTEROID COSTCENTER_OID,
       counterdetail.USRTXT1 USRTXT1,
       counterdetail.USRTXT2 USRTXT2,
       counterdetail.USRTXT3 USRTXT3,
       counterdetail.USRTXT4 USRTXT4,
       counterdetail.USRTXT5 USRTXT5,
       attendanceday.DTS DTS,
       counterdetail.VALUE DURATION,
       counterdetail.DTSUPDATE DTSUPDATE
FROM OBJT_DAYATTENDANCECOUNTRCSTDTL counterdetail WITH (NOLOCK),
     OBJT_DAYATTENDANCECOUNTER dayattendancecounter WITH (NOLOCK),
     OBJT_ATTENDANCEDAY attendanceday WITH (NOLOCK)
WHERE counterdetail.DAYATTENDANCECOUNTEROID = dayattendancecounter.OID
AND dayattendancecounter.ATTENDANCEDAYOID = attendanceday.OID
AND attendanceday.EMPLOYEEOID = dayattendancecounter.EMPLOYEEOID
GO

-- ATTENDANCE EVENTS --

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('OBJTREP_CLOCKINGEVENTS') AND OBJECTPROPERTY(id, 'IsView') = 1)
DROP VIEW OBJTREP_CLOCKINGEVENTS
GO

CREATE VIEW OBJTREP_CLOCKINGEVENTS
AS
SELECT 	clockevent.OID OID,         
		clockevent.EMPLOYEEOID EMPLOYEE_OID,
		clockevent.DEVICEOID DEVICE_OID,  
		clockevent.DTS DTS,         
		clockevent.DTSUPDATE DTSUPDATE
FROM OBJT_ATTENDANCEEVENT clockevent WITH (NOLOCK)
WHERE clockevent.CATEGORY = 'ATTENDANCE'
GO

-- INFO EVENTS --

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('OBJTREP_INFOEVENTS') AND OBJECTPROPERTY(id, 'IsView') = 1)
DROP VIEW OBJTREP_INFOEVENTS
GO

CREATE VIEW OBJTREP_INFOEVENTS
AS
SELECT infoevent.OID OID,
       infoevent.EMPLOYEEOID EMPLOYEE_OID,
       infoevent.DEVICEOID DEVICE_OID,
       infoevent.DTS DTS,
       infoevent.USRTXT1 USRTXT1,
       infoevent.USRTXT2 USRTXT2,
       infoevent.USRTXT3 USRTXT3,
       infoevent.USRTXT4 USRTXT4,
       infoevent.USRTXT5 USRTXT5,
       infoevent.DTSUPDATE DTSUPDATE
FROM OBJT_ATTENDANCEEVENT infoevent WITH (NOLOCK)
WHERE infoevent.CATEGORY = 'INFO'
GO

-- COSTCENTER EVENTS --

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('OBJTREP_COSTCENTEREVENTS') AND OBJECTPROPERTY(id, 'IsView') = 1)
DROP VIEW OBJTREP_COSTCENTEREVENTS
GO

CREATE VIEW OBJTREP_COSTCENTEREVENTS
AS
SELECT costcenterevent.OID OID,
       costcenterevent.EMPLOYEEOID EMPLOYEE_OID,
       costcenterevent.DEVICEOID DEVICE_OID,
       costcenterevent.COSTCENTEROID COSTCENTER_OID,
       costcenterevent.DTS DTS,
       costcenterevent.USRTXT1 USRTXT1,
       costcenterevent.USRTXT2 USRTXT2,
       costcenterevent.USRTXT3 USRTXT3,
       costcenterevent.USRTXT4 USRTXT4,
       costcenterevent.USRTXT5 USRTXT5,
       costcenterevent.DTSUPDATE DTSUPDATE
FROM OBJT_ATTENDANCEEVENT costcenterevent WITH (NOLOCK)
WHERE costcenterevent.CATEGORY = 'COSTCENTER'
GO

-- ACTUAL ATTENDANCES --

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('OBJTREP_ACTUAL_ATTENDANCES') AND OBJECTPROPERTY(id, 'IsView') = 1)
DROP VIEW OBJTREP_ACTUAL_ATTENDANCES
GO

CREATE VIEW OBJTREP_ACTUAL_ATTENDANCES
AS
SELECT attendance.OID OID,
       attendance.EMPLOYEEOID EMPLOYEE_OID,
       attendance.NAME NAME,
       attendance.DESCRIPTION DESCRIPTION,
       attendance.CATEGORY CATEGORY,
       attendance.DTSSTART DTSSTART,
       attendance.DTSSTOP DTSSTOP,
       attendance.ATTENDANCECODEOID DAY_CODE_OID,
       attendance.DTSVALIDFROM DTSVALIDFROM,
       attendance.DTSVALIDUNTIL DTSVALIDUNTIL,
       attendance.DTSUPDATE DTSUPDATE
FROM OBJT_ATTENDANCEOPERATION attendance WITH (NOLOCK)
WHERE attendance.BOTYPE = 1
GO

-- ANOMALIES --

IF EXISTS (SELECT * FROM sysobjects WHERE id = object_id('OBJTREP_ANOMALIES') AND OBJECTPROPERTY(id, 'IsView') = 1)
DROP VIEW OBJTREP_ANOMALIES
GO

CREATE VIEW OBJTREP_ANOMALIES
AS
SELECT anomaly.OID OID,
       attendanceday.EMPLOYEEOID EMPLOYEE_OID,
       anomaly.REASONOID REASON_OID,
       anomaly.DESCRIPTION DESCRIPTION,
       attendanceday.DTS DTS,
       anomaly.DTSVALIDUNTIL DTSVALIDUNTIL,
       anomaly.DTSUPDATE DTSUPDATE
FROM OBJT_ATTENDANCEDAYANOMALY anomaly WITH (NOLOCK),
     OBJT_ATTENDANCEDAY attendanceday WITH (NOLOCK)
WHERE anomaly.ATTENDANCEDAYOID = attendanceday.OID
GO	

